package org.eclipse.scout.contacts.client.common;

import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.AddressBox.LocationBox;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.AddressBox.StreetField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.AddressBox.LocationBox.CityField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.AddressBox.LocationBox.CountryField;
import org.eclipse.scout.contacts.shared.common.AbstractAddressBoxData;
import org.eclipse.scout.rt.client.dto.FormData;
import org.eclipse.scout.rt.client.dto.FormData.DefaultSubtypeSdkCommand;
import org.eclipse.scout.rt.client.dto.FormData.SdkCommand;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.sequencebox.AbstractSequenceBox;
import org.eclipse.scout.rt.client.ui.form.fields.smartfield.AbstractSmartField;
import org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;
import org.eclipse.scout.rt.platform.Order;
import org.eclipse.scout.rt.platform.classid.ClassId;
import org.eclipse.scout.rt.platform.text.TEXTS;
import org.eclipse.scout.rt.platform.util.StringUtility;
import org.eclipse.scout.rt.shared.services.lookup.ILookupCall;

@FormData(value = AbstractAddressBoxData.class, sdkCommand = SdkCommand.CREATE, defaultSubtypeSdkCommand = DefaultSubtypeSdkCommand.CREATE)
public class AbstractAddressBox extends AbstractGroupBox {

	private String address;

	@FormData
	public String getAddress() {
		return address;
	}

	@FormData
	public void setAddress(String adresse) {
		this.address = adresse;
	}

	protected void execChangedValue() {
		validateAddressFields();
	}

	@Override
	protected boolean getConfiguredBorderVisible() {
		return false;
	}

	@Override
	protected int getConfiguredGridH() { // <1>
		return 3;
	}

	@Override
	protected int getConfiguredGridW() { // <1>
		return 1;
	}

	@Override
	protected int getConfiguredGridColumnCount() { // <2>
		return 1;
	}
	// end::addressBox[]

	public StreetField getStreetField() {
		return getFieldByClass(StreetField.class);
	}

	public LocationBox getLocationBox() {
		return getFieldByClass(LocationBox.class);
	}

	public CityField getCityField() {
		return getFieldByClass(CityField.class);
	}

	public CountryField getCountryField() {
		return getFieldByClass(CountryField.class);
	}

	@Order(10)
	@ClassId("a9137ad1-af9d-4fef-a69d-3e3d9ce48f21")
	public class StreetField extends AbstractStringField {

		@Override
		protected String getConfiguredLabel() {
			return TEXTS.get("Street");
		}

		@Override // <1>
		protected void execChangedValue() {
			validateAddressFields();
		}
	}

	@Order(20)
	public class LocationBox extends AbstractSequenceBox {

		@Override
		protected String getConfiguredLabel() {
			return TEXTS.get("Location");
		}

		@Override
		protected boolean getConfiguredAutoCheckFromTo() { // <4>
			return false;
		}

		@Order(10)
		public class CityField extends AbstractStringField {

			@Override
			protected String getConfiguredLabel() {
				return TEXTS.get("City");
			}

			@Override
			protected byte getConfiguredLabelPosition() {
				return LABEL_POSITION_ON_FIELD; // <5>
			}

			// validation des champs adress aprés changement city
			@Override
			protected void execChangedValue() {
				validateAddressFields();
			}
		}

		@Order(20)
		public class CountryField extends AbstractSmartField<String> {
			@Override
			protected String getConfiguredLabel() {
				return TEXTS.get("Country");
			}

			// validation des champs address aprés changement city

			@Override
			protected void execChangedValue() {
				validateAddressFields(); //
			}

			@Override
			protected byte getConfiguredLabelPosition() {
				return LABEL_POSITION_ON_FIELD;
			}

			@Override
			protected Class<? extends ILookupCall<String>> getConfiguredLookupCall() {
				return CountryLookupCall.class;
			}
			// tag::validateAddress[]
		}
	}

	protected void validateAddressFields() {
		boolean hasStreet = StringUtility.hasText(getStreetField().getValue());
		boolean hasCity = StringUtility.hasText(getCityField().getValue());
		getCityField().setMandatory(hasStreet); // city obligatoir si street n'est pas vide
		getCountryField().setMandatory(hasStreet || hasCity);
	}

}
