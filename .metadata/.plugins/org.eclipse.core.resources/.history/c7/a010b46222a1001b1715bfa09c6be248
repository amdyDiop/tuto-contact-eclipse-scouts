package org.eclipse.scout.contacts.client.common;

import java.util.regex.Pattern;

import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.EmailField;
import org.eclipse.scout.contacts.shared.common.AbstractUrlImageFieldData;
import org.eclipse.scout.rt.client.dto.FormData;
import org.eclipse.scout.rt.client.dto.FormData.DefaultSubtypeSdkCommand;
import org.eclipse.scout.rt.client.dto.FormData.SdkCommand;
import org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;
import org.eclipse.scout.rt.platform.exception.VetoException;
import org.eclipse.scout.rt.platform.text.TEXTS;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications
 * recommended.
 */

@FormData(value = AbstractUrlImageFieldData.class, sdkCommand = SdkCommand.CREATE, defaultSubtypeSdkCommand = DefaultSubtypeSdkCommand.CREATE)
public class AbstractEmailField extends AbstractStringField {

	private String email;

	@FormData
	public String getEmail() {
		return email;
	}

	@FormData
	public void setUrl(String url) {
		this.url = url;
		updateImage();
	}

	private static final String EMAIL_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
			+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

	@Override
	protected String getConfiguredLabel() {
		return TEXTS.get("Email");
	}

	@Override // <2>
	protected int getConfiguredMaxLength() {
		return 64;
	}

	@Override
	protected String execValidateValue(String rawValue) {
		if (rawValue != null && !Pattern.matches(EMAIL_PATTERN, rawValue)) {
			throw new VetoException(TEXTS.get("BadEmailAddress"));
		}
		return rawValue;
	}

}
