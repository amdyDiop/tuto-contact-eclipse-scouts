/*
 * Copyright (c) 2015 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Distribution License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/org/documents/edl-v10.html
 *
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 */
package org.eclipse.scout.contacts.client.person;

import java.util.regex.Pattern;

import org.eclipse.scout.contacts.client.common.AbstractUrlImageField;
import org.eclipse.scout.contacts.client.common.CountryLookupCall;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.CancelButton;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.AbstractAddressBox;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.AbstractAddressBox.LocationBox.CityField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.AbstractAddressBox.LocationBox.CountryField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.AbstractEmailField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.MobileField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.ContactInfoBox.PhoneField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.AbstractNotesBox;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.AbstractNotesBox.NotesField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.WorkBox;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.WorkBox.EmailWorkField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.WorkBox.OrganizationField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.WorkBox.PhoneWorkField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.DetailsBox.WorkBox.PositionField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.GeneralBox;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.GeneralBox.DateOfBirthField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.GeneralBox.FirstNameField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.GeneralBox.GenderGroup;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.GeneralBox.LastNameField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.GeneralBox.PictureField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.GeneralBox.PictureUrlField;
import org.eclipse.scout.contacts.client.person.PersonForm.MainBox.OkButton;
import org.eclipse.scout.contacts.shared.person.GenderCodeType;
import org.eclipse.scout.contacts.shared.person.IPersonService;
import org.eclipse.scout.contacts.shared.person.PersonFormData;
import org.eclipse.scout.rt.client.dto.FormData;
import org.eclipse.scout.rt.client.dto.FormData.SdkCommand;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.IForm;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractCancelButton;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractOkButton;
import org.eclipse.scout.rt.client.ui.form.fields.datefield.AbstractDateField;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.radiobuttongroup.AbstractRadioButtonGroup;
import org.eclipse.scout.rt.client.ui.form.fields.sequencebox.AbstractSequenceBox;
import org.eclipse.scout.rt.client.ui.form.fields.smartfield.AbstractSmartField;
import org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;
import org.eclipse.scout.rt.client.ui.form.fields.tabbox.AbstractTabBox;
import org.eclipse.scout.rt.platform.BEANS;
import org.eclipse.scout.rt.platform.Order;
import org.eclipse.scout.rt.platform.classid.ClassId;
import org.eclipse.scout.rt.platform.exception.VetoException;
import org.eclipse.scout.rt.platform.text.TEXTS;
import org.eclipse.scout.rt.platform.util.StringUtility;
import org.eclipse.scout.rt.shared.services.common.code.ICodeType;
import org.eclipse.scout.rt.shared.services.lookup.ILookupCall;

// tag::init[]
@ClassId("1cde38c1-da32-4fdd-92e7-28d82a5d7bf9")
@FormData(value = PersonFormData.class, sdkCommand = SdkCommand.CREATE) // <1>

public class PersonForm extends AbstractForm {

	// represents the person's primary key
	private String personId;

	@FormData // <2>
	public String getPersonId() {
		return personId;
	}

	@FormData // <2>
	public void setPersonId(String personId) {
		this.personId = personId;
	}

	@Override
	public Object computeExclusiveKey() { //
		return getPersonId();
	}

	@Override
	protected int getConfiguredDisplayHint() {
		return IForm.DISPLAY_HINT_VIEW;
	}

	@Override
	protected String getConfiguredTitle() {
		return TEXTS.get("Person");
	}

	public AbstractAddressBox getAddressBox() {
		return getFieldByClass(AbstractAddressBox.class);
	}

	public CancelButton getCancelButton() {
		return getFieldByClass(CancelButton.class);
	}

	public PictureUrlField getPictureUrlField() {
		return getFieldByClass(PictureUrlField.class);
	}

	public NotesBox getNotesBox() {
		return getFieldByClass(NotesBox.class);
	}

	public NotesField getNotesField() {
		return getFieldByClass(NotesField.class);
	}

	public OrganizationField getOrganizationField() {
		return getFieldByClass(OrganizationField.class);
	}

	public ContactInfoBox getPersonDetailsBox() {
		return getFieldByClass(ContactInfoBox.class);
	}

	public DateOfBirthField getDateOfBirthField() {
		return getFieldByClass(DateOfBirthField.class);
	}

	public DetailsBox getDetailsBox() {
		return getFieldByClass(DetailsBox.class);
	}

	public AbstractEmailField getEmailField() {
		return getFieldByClass(AbstractEmailField.class);
	}

	public EmailWorkField getEmailWorkField() {
		return getFieldByClass(EmailWorkField.class);
	}

	public FirstNameField getFirstNameField() {
		return getFieldByClass(FirstNameField.class);
	}

	public GenderGroup getGenderGroup() {
		return getFieldByClass(GenderGroup.class);
	}

	public GeneralBox getGeneralBox() {
		return getFieldByClass(GeneralBox.class);
	}

	public LastNameField getLastNameField() {
		return getFieldByClass(LastNameField.class);
	}

	public MainBox getMainBox() {
		return getFieldByClass(MainBox.class);
	}

	public MobileField getMobileField() {
		return getFieldByClass(MobileField.class);
	}

	public OkButton getOkButton() {
		return getFieldByClass(OkButton.class);
	}

	public PhoneField getPhoneField() {
		return getFieldByClass(PhoneField.class);
	}

	public PhoneWorkField getPhoneWorkField() {
		return getFieldByClass(PhoneWorkField.class);
	}

	public PictureField getPictureField() {
		return getFieldByClass(PictureField.class);
	}

	public PositionField getPositionField() {
		return getFieldByClass(PositionField.class);
	}

	public WorkBox getWorkBox() {
		return getFieldByClass(WorkBox.class);
	}

	@Order(10)
	public class MainBox extends AbstractGroupBox { // <1>

		@Order(10)
		public class GeneralBox extends AbstractGroupBox { // <2>
			@Order(10)
			public class PictureUrlField extends AbstractStringField {
				@Override
				protected boolean getConfiguredVisible() {
					return false;
				}
			}

			@Order(20)
			public class PictureField extends AbstractUrlImageField {

			}

			@Order(30)
			@ClassId("359be835-439f-456e-9b0d-c832b034a298")
			public class FirstNameField extends AbstractStringField {
				@Override
				protected String getConfiguredLabel() {
					return TEXTS.get("FirstName");
				}
			}

			@Order(40)
			public class LastNameField extends AbstractStringField {
				@Override
				protected String getConfiguredLabel() {
					return TEXTS.get("LastName");
				}
			}

			@Order(50)
			public class DateOfBirthField extends AbstractDateField {
				@Override
				protected String getConfiguredLabel() {
					return TEXTS.get("DateOfBirth");
				}
			}

			@Order(60)
			public class GenderGroup extends AbstractRadioButtonGroup<String> {
				@Override
				protected String getConfiguredLabel() {
					return TEXTS.get("Gender");
				}

				@Override
				protected Class<? extends ICodeType<?, String>> getConfiguredCodeType() {
					return GenderCodeType.class;
				}
			}

		}

		@Order(20)
		public class DetailsBox extends AbstractTabBox {

			@Order(10)
			public class ContactInfoBox extends AbstractGroupBox {

				@Override
				protected String getConfiguredLabel() {
					return TEXTS.get("ContactInfo");
				}

				@Order(10)
				public class AbstractAddressBox extends AbstractGroupBox {
					protected void execChangedValue() {
						validateAddressFields();
					}

					@Override
					protected boolean getConfiguredBorderVisible() {
						return false;
					}

					@Override
					protected int getConfiguredGridH() {
						return 3;
					}

					@Override
					protected int getConfiguredGridW() {
						return 1;
					}

					@Override
					protected int getConfiguredGridColumnCount() {
						return 1;
					}

					public StreetField getStreetField() {
						return getFieldByClass(StreetField.class);
					}

					public LocationBox getLocationBox() {
						return getFieldByClass(LocationBox.class);
					}

					public CityField getCityField() {
						return getFieldByClass(CityField.class);
					}

					public CountryField getCountryField() {
						return getFieldByClass(CountryField.class);
					}

					@Order(10)
					public class StreetField extends AbstractStringField {

						@Override
						protected String getConfiguredLabel() {
							return TEXTS.get("Street");
						}

						@Override // <1>
						protected void execChangedValue() {
							validateAddressFields();
						}
					}

					@Order(20)
					public class LocationBox extends AbstractSequenceBox {

						@Override
						protected String getConfiguredLabel() {
							return TEXTS.get("Location");
						}

						@Override
						protected boolean getConfiguredAutoCheckFromTo() { // <4>
							return false;
						}

						@Order(10)
						public class CityField extends AbstractStringField {

							@Override
							protected String getConfiguredLabel() {
								return TEXTS.get("City");
							}

							@Override
							protected byte getConfiguredLabelPosition() {
								return LABEL_POSITION_ON_FIELD; // <5>
							}

							// validation des champs adress aprés changement city
							@Override
							protected void execChangedValue() {
								validateAddressFields();
							}
						}

						@Order(20)
						public class CountryField extends AbstractSmartField<String> {
							@Override
							protected String getConfiguredLabel() {
								return TEXTS.get("Country");
							}

							// validation des champs address aprés changement city

							@Override
							protected void execChangedValue() {
								validateAddressFields(); //
							}

							@Override
							protected byte getConfiguredLabelPosition() {
								return LABEL_POSITION_ON_FIELD;
							}

							@Override
							protected Class<? extends ILookupCall<String>> getConfiguredLookupCall() {
								return CountryLookupCall.class;
							}
							// tag::validateAddress[]
						}
					}

					protected void validateAddressFields() {
						boolean hasStreet = StringUtility.hasText(getStreetField().getValue());
						boolean hasCity = StringUtility.hasText(getCityField().getValue());
						getCityField().setMandatory(hasStreet); // city obligatoir si street n'est pas vide
						getCountryField().setMandatory(hasStreet || hasCity);
					}

				}

				@Order(20)
				public class PhoneField extends AbstractStringField {

					@Override
					protected String getConfiguredLabel() {
						return TEXTS.get("Phone");
					}
				}

				@Order(30)
				public class MobileField extends AbstractStringField {

					@Override
					protected String getConfiguredLabel() {
						return TEXTS.get("Mobile");
					}
				}

				@Order(40)
				public class AbstractEmailField extends AbstractStringField {

					private static final String EMAIL_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
							+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

					@Override
					protected String getConfiguredLabel() {
						return TEXTS.get("Email");
					}

					@Override // <2>
					protected int getConfiguredMaxLength() {
						return 64;
					}

					@Override
					protected String execValidateValue(String rawValue) {
						if (rawValue != null && !Pattern.matches(EMAIL_PATTERN, rawValue)) {
							throw new VetoException(TEXTS.get("BadEmailAddress"));
						}
						return rawValue;
					}

				}

			}

			@Order(20)
			public class WorkBox extends AbstractGroupBox {

				@Override
				protected String getConfiguredLabel() {
					return TEXTS.get("Work");
				}

				@Order(10)
				public class PositionField extends AbstractStringField {

					@Override
					protected String getConfiguredLabel() {
						return TEXTS.get("Position");
					}
				}

				@Order(20)
				public class OrganizationField extends AbstractSmartField<String> { // <1>

					@Override
					protected String getConfiguredLabel() {
						return TEXTS.get("Organization");
					}

				}

				@Order(30)
				public class PhoneWorkField extends AbstractStringField {

					@Override
					protected String getConfiguredLabel() {
						return TEXTS.get("Phone");
					}
				}

				@Order(40)
				public class EmailWorkField extends AbstractStringField {

					@Override
					protected String getConfiguredLabel() {
						return TEXTS.get("Email");
					}
				}

			}

			@Order(30)
			public class AbstractNotesBox extends AbstractGroupBox {

				@Override
				protected String getConfiguredLabel() {
					return TEXTS.get("Notes");
				}

				@Order(10)
				public class NotesField extends AbstractStringField {

					@Override
					protected int getConfiguredGridH() {
						return 4;
					}

					@Override
					protected boolean getConfiguredLabelVisible() {
						return false;
					}

					@Override
					protected boolean getConfiguredMultilineText() {
						return true;
					}
				}
			}
		}

		@Order(30)
		public class OkButton extends AbstractOkButton {
		}

		@Order(40)
		public class CancelButton extends AbstractCancelButton {
		}
	}

	public void startModify() {
		startInternalExclusive(new ModifyHandler());
	}

	public void startNew() {
		startInternal(new NewHandler());
	}

	public class ModifyHandler extends AbstractFormHandler {
		@Override
		protected void execLoad() {
			IPersonService service = BEANS.get(IPersonService.class);
			PersonFormData formData = new PersonFormData();
			exportFormData(formData);
			formData = service.load(formData);
			importFormData(formData);
			getForm().setSubTitle(calculateSubTitle());
		}

		@Override
		protected void execStore() {
			IPersonService service = BEANS.get(IPersonService.class);
			PersonFormData formData = new PersonFormData();
			exportFormData(formData);
			service.store(formData);
		}
	}

	public class NewHandler extends AbstractFormHandler {
		@Override
		protected void execStore() {
			IPersonService service = BEANS.get(IPersonService.class);
			PersonFormData formData = new PersonFormData();
			exportFormData(formData);
			formData = service.create(formData);
			importFormData(formData);
		}
	}

	protected String calculateSubTitle() {
		return StringUtility.join(" ", getFirstNameField().getValue(), getLastNameField().getValue());
	}

}
